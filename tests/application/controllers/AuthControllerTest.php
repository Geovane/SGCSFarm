<?php


require_once dirname(__FILE__) . '/../../../application/controllers/AuthController.php';

/**
 * Classe de teste do AuthController, essa classe possui métodos que realizam testes para validar
 * o funcionamento do AuthController.
 * Generated by PHPUnit on 2012-07-09 at 22:48:03.
 * @author Luiz Daud
 * @version 0.1
 * @access public
 */
class AuthControllerTest extends Zend_Test_PHPUnit_ControllerTestCase
{
    
    /**
     * Funcao que inicializa todos os parametros necessarios para o correto
     * funcionamento dos testes, como conexões com o banco de dados e
     * variaveis de controle dos testes.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     *
     */

    public function setUp(){
        // Assign and instantiate in one step:
        $this->bootstrap = new Zend_Application(
        APPLICATION_ENV,
        APPLICATION_PATH
           . '/configs/application.ini'
        );
        parent::setUp();
       // Zend_Controller_Front::getInstance()->setParam('noErrorHandler',true)->throwExceptions(true); 
    
    }
    
    /**
     * Função que verifica se um login válido redireciona para a página inicial do perfil.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    
    public function testValidLoginShouldGoToProfilePage()
    {
        //faz login
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));      
        $this->dispatch('/Auth/login');
        
         //verifica se os controllers e actions foram inicializados
        $this->assertController('Auth');
        $this->assertAction('login');
        //Verifica se o perfil foi exibido.
        $this->assertRedirectTo('/');

        
    }
    
    /**
     * Função que verifica se um login inválido redireciona para a página de login.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    
    public function testInvalidCredentialsShouldResultInRedisplayOfLoginForm()
    {
        //tenta fazer login
        $request = $this->getRequest();
        $request->setMethod('POST')
                ->setPost(array(
                    'login' => 'bogus',
                    'senha' => 'reallyReallyBogus',
                ));
        //direciona para o controller de login
        $this->dispatch('/Auth');
        //verifica se o controller e o action estão corretos
        $this->assertController('Auth');
        $this->assertAction('index');
        //verifica o redirecionamento
        $this->assertRedirectTo('/Auth/login');
        }
    
        /**
     * Função que verifica a página inicial contem um formulário de login.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
        
     public function testIndexActionShouldContainLoginForm()
    {
         //direciona para a tela de login
        $this->dispatch('/Auth/login');
        //verifica o action
        $this->assertAction('login');
        //verifica se o formulario está presente
        $this->assertQueryCount('form', 1);
    }
     
    /**
     * Função que verifica se a página inicial foi invocada corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    
    public function testHomePageIsASuccessfulRequest() {
       //direciona ára a tela de login
        $this->dispatch('/Auth');
        //verifica os contreoller e actions
        $this->assertController('Auth');
        $this->assertAction('index');
       // verifica se alguma exception foi lançada
        $this->assertFalse($this->response
                        ->isException());
        //verifica o redirecionamento
        $this->assertRedirectTo('/Auth/login');
    }
    
     /**
     * Função que verifica se o logout ocorre corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    
    public function testLogoutAction(){
        //faz login
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        
       // verifica os controllers
        $this->assertController('Auth');
        $this->assertAction('login');
        //executa o logout
        $this->dispatch('/auth/logout');
        //verifica se foi pra pagina de login
        $this->assertRedirectTo('/Auth/login');
    }

    
    /**
     * Função que verifica se o sistema solicita a troca de senha no primeiro acesso.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    
    
public function testSenhaAction(){
    //faz login
    $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => '12345',
                  'senha' => '98765'
      ));    
    $this->dispatch('/Auth/login');
    //verifica se foi para a pagina de mudança de senha.
    $this->assertRedirectTo('/Auth/senha');
    }

    public function tearDown() {
        /* Tear Down Routine */
    }
}

?>