<?php

require_once dirname(__FILE__) . '/../../../application/controllers/ProjetoController.php';

/**
 * Classe de teste do ProjetoController, essa classe possui métodos que realizam testes para validar
 * o funcionamento do ProjetoController.
 * Generated by PHPUnit on 2012-07-10 at 02:21:57.
 * @author Luiz Daud
 * @version 0.1
 * @access public
 */
class ProjetoControllerTest extends Zend_Test_PHPUnit_ControllerTestCase {

    /**
     * Funcao que inicializa todos os parametros necessarios para o correto
     * funcionamento dos testes, como conexões com o banco de dados e
     * variaveis de controle dos testes.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     *
     */
    protected function setUp() {
        // Assign and instantiate in one step:
        $this->bootstrap = new Zend_Application(
        APPLICATION_ENV,
        APPLICATION_PATH
           . '/configs/application.ini'
        );
        parent::setUp();
       Zend_Controller_Front::getInstance()->setParam('noErrorHandler',true)->throwExceptions(true); 
        
        //inicializa as tabelas do BD
       
        $this->project = new Model_DbTable_Proj();
        $this->funcionario = new Model_DbTable_Func();
        $this->estado = new Model_DbTable_Estado();
        $this->projbugzilla = new Model_DbTable_ProjBugzilla();
        $this->projgit = new Model_DbTable_ProjGit();
        $this->funcaoproj = new Model_DbTable_FuncaoProjeto();
        $this->colab = new Model_DbTable_Colaboradores();
        $this->empresafilial = new Model_DbTable_Filial();
        $this->funcaoColabProj = new Model_DbTable_FuncaoColabProj();
        $this->tipoEstadoTarefaColabProj = new Model_DbTable_TipoEstadoTarefaColabProj();
        $this->colabProj = new Model_DbTable_ColaboradoresProjetos();
        $this->ProjGerFiliColab = new Model_DbTable_ProjGerFiliColab();
        $this->empresa = new Model_DbTable_Empresa();
        $this->filial = new Model_DbTable_Filial();
        $this->estadoProj = new Model_DbTable_EstadoProj();
        $this->projFiliais = new Model_DbTable_ProjetosFiliais();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

     /**
     * Função que verifica se o action init está sendo alcançado corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    function testInit() {
         $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        $this->assertController('Auth');
        $this->assertAction('login');        
        
        $this->dispatch('/Projeto/Init');
        $this->assertController('Projeto');
        $this->assertAction('Init');
    }

     /**
     * Função que verifica se o action index está sendo alcançado corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    
    public function testIndexAction() {        
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        $this->assertController('Auth');
        $this->assertAction('login'); 
        
        $this->dispatch('/Projeto/index');
        $this->assertController('Projeto');
        $this->assertAction('index');
    }

     /**
     * Função que verifica se o gerencio está sendo alcançado corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testGerencioAction() {
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        $this->assertController('Auth');
        $this->assertAction('login'); 
        
        $this->dispatch('/Projeto/Gerencio');
        $this->assertController('Projeto');
        $this->assertAction('Gerencio');
    }

    /**
     * Função que verifica se o action create está sendo executado corretamente,
     * cria um projeto e verifica se a operação foi concluida
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testCreateAction() {
        //faz login
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        //seta o post
       
        
        $this->request->setMethod('POST')
              ->setPost(array(
                        'nome' => 'projeto X',
                        'descricao' => 'coisas muito tenebrosoas ocorrerão aqui',
                        'dtinicio' => '17/07/2012',
                        'idGerente' => '1',
                        ));       
        //cria o projeto e verifica se foi criado
        $this->dispatch('/projeto/create');
        $this->assertRedirectTo('/projeto/create/flag/1');
        //
        //
        // busca um projeto no banco, e verifica a existencia dele
        $select = $this->projeto->select();
        $select->from($this->projeto, 'nome');
        $select->where('nome = ?', $this->_request->getPost('nome'));
        //verifica se o projeto foi encontrado e confirma se sim e fala se não   
        if($this->projeto->fetchRow($select)->nome == $this->_request->getPost('nome')){
          assert(1);
      }
      else
          assert(0);    
        
    }

    /**
     * Função que verifica se o action edit está sendo executado corretamente,
     * cria um projeto, seleciona, edita e verifica se a operação foi concluida.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testEditAction() {
        //faz login
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        //seta o post     
        
        $this->request->setMethod('POST')
              ->setPost(array(
                        'nome' => 'projeto EDIT',
                        'descricao' => 'coisas muito EDITADAS ocorrerão aqui',
                        'dtinicio' => '17/07/2012',
                        'idGerente' => '1',
                        ));       
        //cria o projeto e verifica se foi criado
        $this->dispatch('/projeto/create');
        $this->assertRedirectTo('/projeto/create/flag/1');
        //
        //
        // busca um projeto no banco, e verifica a existencia dele
        $select = $this->projeto->select();
        $select->from($this->projeto, 'idprojeto');
        $select->where('nome = ?', $this->_request->getPost('nome'));
        
        $this->request->setMethod('POST')
              ->setPost(array(
                        'descricao' => 'coisas muito EDITADAS ja ocorreram aqui',
                        'estado' => '3',
                        ));       
        
        
        //edita o projeto   
        $this->dispatch('/projeto/edit/id/' + $this->projeto->fetchRow($select)->nome );
         
    }

     /**
     * Função que verifica se o action delete está sendo executado corretamente,
     * cria um projeto, logo após, deleta.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testDeleteAction() {
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        //seta o post     
        
        $this->request->setMethod('POST')
              ->setPost(array(
                        'nome' => 'projeto DELETE',
                        'descricao' => 'coisas muito Deletadas ocorrerão aqui',
                        'dtinicio' => '17/07/2012',
                        'idGerente' => '1',
                        ));       
        //cria o projeto e verifica se foi criado
        $this->dispatch('/projeto/create');
        $this->assertRedirectTo('/projeto/create/flag/1');
        //
        //
        // busca um funcionario no banco, e verifica a existencia dele
        $select = $this->projeto->select();
        $select->from($this->projeto, 'idprojeto');
        $select->where('nome = ?', $this->_request->getPost('nome'));
        //deleta
        $this->dispatch('/projeto/delete/id/' + $this->projeto->fetchRow($select)->idprojeto );
      
    }

    /**
     * Função que verifica se o action detalhes está sendo alcançado corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testDetalhesAction() {
        $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        $this->assertController('Auth');
        $this->assertAction('login'); 
        
        $this->dispatch('/Projeto/Detalhes');
        $this->assertController('Projeto');
        $this->assertAction('Detalhes');
    }

   /**
     * Função que verifica se o action adminfilial está sendo alcançado corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testAdminfilialAction() {
         $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        $this->assertController('Auth');
        $this->assertAction('login'); 
        
        $this->dispatch('/Projeto/Adminfilial');
        $this->assertController('Projeto');
        $this->assertAction('Adminfilial');
    }

    /**
     * Função que verifica se o action admin geral está sendo alcançado corretamente.
     *
     * @author Luiz Daud
     * @access public
     * @return void
     */
    public function testAdmingeralAction() {
       $this->request->setMethod('POST')
              ->setPost(array(
                  'login' => 'mimoso',
                  'senha' => '1234'
              ));
        $this->dispatch('/Auth/login');
        $this->assertController('Auth');
        $this->assertAction('login'); 
        
        $this->dispatch('/Projeto/AdminGeral');
        $this->assertController('Projeto');
        $this->assertAction('AdminGeral');
    }

}

?>
